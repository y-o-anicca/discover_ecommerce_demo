// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Brand struct {
	ID       string     `json:"id"`
	Name     string     `json:"name"`
	Products []*Product `json:"products"`
	Category string     `json:"category"`
	Location string     `json:"location"`
}

type BrandsByQueryInput struct {
	Query string `json:"query"`
}

type BrandsInput struct {
	Category *CategoryKey `json:"category,omitempty"`
	Location *LocationKey `json:"location,omitempty"`
}

type Product struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

type CategoryKey string

const (
	CategoryKeyCoffee     CategoryKey = "COFFEE"
	CategoryKeyFood       CategoryKey = "FOOD"
	CategoryKeyToys       CategoryKey = "TOYS"
	CategoryKeyAppliances CategoryKey = "APPLIANCES"
	CategoryKeyFurniture  CategoryKey = "FURNITURE"
)

var AllCategoryKey = []CategoryKey{
	CategoryKeyCoffee,
	CategoryKeyFood,
	CategoryKeyToys,
	CategoryKeyAppliances,
	CategoryKeyFurniture,
}

func (e CategoryKey) IsValid() bool {
	switch e {
	case CategoryKeyCoffee, CategoryKeyFood, CategoryKeyToys, CategoryKeyAppliances, CategoryKeyFurniture:
		return true
	}
	return false
}

func (e CategoryKey) String() string {
	return string(e)
}

func (e *CategoryKey) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CategoryKey(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CategoryKey", str)
	}
	return nil
}

func (e CategoryKey) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type LocationKey string

const (
	LocationKeyLosangeles LocationKey = "LOSANGELES"
	LocationKeyNewyork    LocationKey = "NEWYORK"
	LocationKeySeattle    LocationKey = "SEATTLE"
	LocationKeyDallas     LocationKey = "DALLAS"
	LocationKeyMiami      LocationKey = "MIAMI"
)

var AllLocationKey = []LocationKey{
	LocationKeyLosangeles,
	LocationKeyNewyork,
	LocationKeySeattle,
	LocationKeyDallas,
	LocationKeyMiami,
}

func (e LocationKey) IsValid() bool {
	switch e {
	case LocationKeyLosangeles, LocationKeyNewyork, LocationKeySeattle, LocationKeyDallas, LocationKeyMiami:
		return true
	}
	return false
}

func (e LocationKey) String() string {
	return string(e)
}

func (e *LocationKey) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = LocationKey(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid LocationKey", str)
	}
	return nil
}

func (e LocationKey) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
